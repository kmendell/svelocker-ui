name: Cleanup Untagged and Digest-Only Images

on:
  # Run on a schedule (every Sunday at midnight)
  #   schedule:
  #     - cron: '0 0 * * 0'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      dryRun:
        description: 'Dry run (no actual deletion)'
        type: boolean
        default: false
      registry:
        description: 'Registry host (leave empty for GitHub Container Registry)'
        type: string
        default: 'ghcr.io'
      organization:
        description: 'Organization or username'
        required: false
        type: string
        default: ''
      olderThan:
        description: 'Only delete images older than X days (0 for all)'
        type: number
        default: 7

jobs:
  cleanup:
    name: Cleanup Unnecessary Images
    runs-on: self-hosted
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Login to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ github.event.inputs.registry || 'ghcr.io' }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create cleanup script
        run: |
          cat > cleanup.js << 'EOF'
          const fs = require('fs');
          const https = require('https');
          const path = require('path');

          // Configuration
          const DRY_RUN = ${{ github.event.inputs.dryRun || 'false' }};
          const REGISTRY = "${{ github.event.inputs.registry || 'ghcr.io' }}";
          const ORG = "${{ github.event.inputs.organization || github.repository_owner }}";
          const TOKEN = "${{ secrets.GITHUB_TOKEN }}";
          const OLDER_THAN_DAYS = ${{ github.event.inputs.olderThan || 7 }};

          // Tags to preserve
          const PRESERVE_PATTERNS = [
            /^latest$/,                      // latest tag
            /^v?\d+\.\d+\.\d+/,              // Semantic versions like v1.2.3 or 1.2.3
            /^v?\d+\.\d+/,                   // Shortened versions like v1.2 or 1.2
            /^v?\d+$/,                       // Major versions like v1 or 1
            /^development$/,                 // development tag
            /^pr-\d+/,                       // PR tags like pr-123
            /^main$/,                        // main branch tag
            /^master$/,                      // master branch tag
            /^stable$/,                      // stable tag
            /^beta$/,                        // beta tag
            /^alpha$/,                       // alpha tag
            /^rc-\d+/,                       // Release candidates like rc-1
          ];

          // Statistics
          let deletedCount = 0;
          let preservedCount = 0;
          let failedCount = 0;

          // GitHub API URLs
          let API_URL;
          let PACKAGES_URL;

          if (REGISTRY.toLowerCase().includes("github") || REGISTRY === "ghcr.io") {
            API_URL = "https://api.github.com";
            PACKAGES_URL = `${API_URL}/users/${ORG}/packages/container`;
          } else {
            console.error(`Custom registry ${REGISTRY} not supported yet`);
            process.exit(1);
          }

          const headers = {
            'Accept': 'application/vnd.github+json',
            'Authorization': `Bearer ${TOKEN}`,
            'X-GitHub-Api-Version': '2022-11-28',
            'User-Agent': 'GitHub-Container-Cleanup'
          };

          /**
           * Make an HTTP request to the GitHub API
           */
          function makeRequest(url, method = 'GET') {
            return new Promise((resolve, reject) => {
              const options = {
                method,
                headers
              };

              const req = https.request(url, options, (res) => {
                let data = '';
                
                res.on('data', (chunk) => {
                  data += chunk;
                });
                
                res.on('end', () => {
                  if (res.statusCode >= 200 && res.statusCode < 300) {
                    try {
                      // Only parse as JSON for non-204 responses
                      const result = res.statusCode === 204 ? { success: true } : JSON.parse(data);
                      resolve({ statusCode: res.statusCode, data: result });
                    } catch (error) {
                      reject(new Error(`Failed to parse response: ${error.message}`));
                    }
                  } else {
                    reject(new Error(`Request failed with status code ${res.statusCode}: ${data}`));
                  }
                });
              });
              
              req.on('error', (error) => {
                reject(error);
              });
              
              req.end();
            });
          }

          /**
           * Check if a tag is a digest-based tag (sha256)
           */
          function isDigestTag(tag) {
            return tag.startsWith('sha256-') || /^[0-9a-f]{64}$/.test(tag);
          }

          /**
           * Check if a tag should be preserved based on our patterns
           */
          function isPreservedTag(tag) {
            return PRESERVE_PATTERNS.some(pattern => pattern.test(tag));
          }

          /**
           * Get all container packages
           */
          async function getPackages() {
            let packages = [];
            let page = 1;
            
            while (true) {
              try {
                const response = await makeRequest(`${PACKAGES_URL}?page=${page}&per_page=100`);
                const pagePackages = response.data;
                
                if (!pagePackages || pagePackages.length === 0) {
                  break;
                }
                
                packages = packages.concat(pagePackages);
                page++;
              } catch (error) {
                console.error(`Error fetching packages: ${error.message}`);
                break;
              }
            }
            
            return packages;
          }

          /**
           * Get all versions for a package
           */
          async function getPackageVersions(packageName) {
            try {
              const response = await makeRequest(`${PACKAGES_URL}/${packageName}/versions`);
              return response.data;
            } catch (error) {
              console.error(`Error fetching versions for ${packageName}: ${error.message}`);
              return [];
            }
          }

          /**
           * Determine if a version should be deleted based on its tags
           */
          function shouldDeleteVersion(version) {
            const tags = version?.metadata?.container?.tags || [];
            
            // Case 1: No tags at all (untagged)
            if (tags.length === 0) {
              return true;
            }
            
            // Case 2: Check if all tags are digest-based or non-preserved
            return tags.every(tag => isDigestTag(tag) || !isPreservedTag(tag));
          }

          /**
           * Delete a package version
           */
          async function deleteVersion(packageName, versionId) {
            try {
              if (DRY_RUN) {
                console.log(`[DRY RUN] Would delete ${packageName} version ${versionId}`);
                return true;
              }
              
              const response = await makeRequest(`${PACKAGES_URL}/${packageName}/versions/${versionId}`, 'DELETE');
              const success = response.statusCode === 204;
              
              if (success) {
                console.log(`✅ Deleted ${packageName} version ${versionId}`);
              } else {
                console.log(`❌ Failed to delete ${packageName} version ${versionId}`);
              }
              
              return success;
            } catch (error) {
              console.error(`Error deleting ${packageName} version ${versionId}: ${error.message}`);
              return false;
            }
          }

          /**
           * Format tag info for logging
           */
          function formatTagInfo(tags) {
            if (!tags || tags.length === 0) {
              return "no tags";
            }
            
            const preservedTags = tags.filter(tag => isPreservedTag(tag));
            const digestTags = tags.filter(tag => isDigestTag(tag));
            const otherTags = tags.filter(tag => !isDigestTag(tag) && !isPreservedTag(tag));
            
            let tagInfo = `${tags.length} tags: `;
            
            if (preservedTags.length > 0) {
              tagInfo += `${preservedTags.length} preserved, `;
            }
            
            if (digestTags.length > 0) {
              tagInfo += `${digestTags.length} digest, `;
            }
            
            if (otherTags.length > 0) {
              tagInfo += `${otherTags.length} other, `;
            }
            
            return tagInfo.replace(/, $/, '');
          }

          /**
           * Main cleanup function
           */
          async function cleanup() {
            console.log(`${DRY_RUN ? '[DRY RUN] ' : ''}Starting cleanup in ${ORG}`);
            
            const packages = await getPackages();
            console.log(`Found ${packages.length} packages`);
            
            for (const pkg of packages) {
              const packageName = pkg.name;
              console.log(`\nProcessing package: ${packageName}`);
              
              const versions = await getPackageVersions(packageName);
              console.log(`  Found ${versions.length} versions`);
              
              for (const version of versions) {
                const versionId = version.id;
                const createdAt = new Date(version.created_at);
                const tags = version?.metadata?.container?.tags || [];
                
                // Check age if OLDER_THAN_DAYS is specified
                if (OLDER_THAN_DAYS > 0) {
                  const ageInDays = (new Date() - createdAt) / (1000 * 60 * 60 * 24);
                  if (ageInDays < OLDER_THAN_DAYS) {
                    console.log(`  Skipping ${versionId} - too recent (${createdAt.toISOString()})`);
                    preservedCount++;
                    continue;
                  }
                }
                
                const tagInfo = formatTagInfo(tags);
                
                // Check if we should delete this version
                if (shouldDeleteVersion(version)) {
                  console.log(`  Deleting version ${versionId} (${tagInfo}) from ${createdAt.toISOString()}`);
                  const success = await deleteVersion(packageName, versionId);
                  if (success) {
                    deletedCount++;
                  } else {
                    failedCount++;
                  }
                } else {
                  console.log(`  Preserving version ${versionId} (${tagInfo}) from ${createdAt.toISOString()}`);
                  preservedCount++;
                }
              }
            }
            
            console.log(`\nCleanup summary:`);
            console.log(`  Deleted: ${deletedCount} versions`);
            console.log(`  Preserved: ${preservedCount} versions`);
            console.log(`  Failed: ${failedCount} deletions`);
            console.log(`  ${DRY_RUN ? '[DRY RUN] No actual deletions performed' : 'Cleanup completed'}`);
            
            // Set output for GitHub Actions
            const envFile = process.env.GITHUB_ENV;
            if (envFile) {
              fs.appendFileSync(envFile, `DELETED_COUNT=${deletedCount}\n`);
              fs.appendFileSync(envFile, `PRESERVED_COUNT=${preservedCount}\n`);
              fs.appendFileSync(envFile, `FAILED_COUNT=${failedCount}\n`);
            }
          }

          // Run the cleanup
          cleanup().catch(error => {
            console.error(`Unhandled error during cleanup: ${error.message}`);
            process.exit(1);
          });
          EOF

      - name: Run cleanup script
        run: node cleanup.js

      - name: Create Summary
        if: always()
        run: |
          echo "# Container Image Cleanup Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: \`${{ github.event.inputs.registry || 'ghcr.io' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Organization: \`${{ github.event.inputs.organization || github.repository_owner }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Dry run: \`${{ github.event.inputs.dryRun || 'false' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Age filter: \`${{ github.event.inputs.olderThan || '7' }} days\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Deleted: ${{ env.DELETED_COUNT || '0' }} images" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Preserved: ${{ env.PRESERVED_COUNT || '0' }} images" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: ${{ env.FAILED_COUNT || '0' }} deletions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "See job logs for detailed results" >> $GITHUB_STEP_SUMMARY
