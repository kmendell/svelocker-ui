name: Cleanup Untagged and Digest-Only Images

on:
  # Run on a schedule (every Sunday at midnight)
  schedule:
    - cron: '0 0 * * 0'

  # Allow manual triggering
  workflow_dispatch:
    inputs:
      dryRun:
        description: 'Dry run (no actual deletion)'
        type: boolean
        default: true
      registry:
        description: 'Registry host (leave empty for GitHub Container Registry)'
        type: string
        default: 'ghcr.io'
      organization:
        description: 'Organization or username'
        required: false
        type: string
        default: ''
      olderThan:
        description: 'Only delete images older than X days (0 for all)'
        type: number
        default: 7

jobs:
  cleanup:
    name: Cleanup Unnecessary Images
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create cleanup script
        run: |
          cat > cleanup.sh << 'EOF'
          #!/bin/bash

          set -e  # Exit on any error

          # Configuration
          DRY_RUN="${{ github.event.inputs.dryRun || 'true' }}"
          REGISTRY="${{ github.event.inputs.registry || 'ghcr.io' }}"
          ORG="${{ github.event.inputs.organization || github.repository_owner }}"
          OLDER_THAN_DAYS="${{ github.event.inputs.olderThan || 7 }}"

          # Stats counters
          DELETED_COUNT=0
          PRESERVED_COUNT=0
          FAILED_COUNT=0

          # Current date in seconds since epoch
          NOW=$(date +%s)

          # Convert days to seconds
          OLDER_THAN_SECONDS=$((OLDER_THAN_DAYS * 24 * 60 * 60))

          # Helper function to check if a tag is a digest tag (sha256)
          is_digest_tag() {
            local tag=$1
            if [[ $tag =~ ^sha256- ]] || [[ $tag =~ ^[0-9a-f]{64}$ ]]; then
              return 0  # True
            else
              return 1  # False
            fi
          }

          # Helper function to check if a tag should be preserved
          is_preserved_tag() {
            local tag=$1
            
            # Patterns to preserve
            if [[ $tag == "latest" ]] || \
               [[ $tag =~ ^v?[0-9]+\.[0-9]+\.[0-9]+ ]] || \
               [[ $tag =~ ^v?[0-9]+\.[0-9]+ ]] || \
               [[ $tag =~ ^v?[0-9]+$ ]] || \
               [[ $tag == "development" ]] || \
               [[ $tag =~ ^pr-[0-9]+ ]] || \
               [[ $tag == "main" ]] || \
               [[ $tag == "master" ]] || \
               [[ $tag == "stable" ]] || \
               [[ $tag == "beta" ]] || \
               [[ $tag == "alpha" ]] || \
               [[ $tag =~ ^rc-[0-9]+ ]]; then
              return 0  # True
            else
              return 1  # False
            fi
          }

          # Format a message with prefix
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') $1"
          }

          # Debug function - print the raw response for debugging
          debug_response() {
            local description=$1
            local response=$2
            
            echo "DEBUG: $description"
            echo "$response" | jq '.'
            echo "--------------------------------"
          }

          # Helper function to check if a version should be deleted
          should_delete_version() {
            local tags=("$@")
            
            # If no tags, it should be deleted
            if [ ${#tags[@]} -eq 0 ]; then
              return 0  # True
            fi
            
            # Check if all tags are digest-based or non-preserved
            local should_delete=true
            for tag in "${tags[@]}"; do
              if ! is_digest_tag "$tag" && is_preserved_tag "$tag"; then
                should_delete=false
                break
              fi
            done
            
            if [ "$should_delete" = true ]; then
              return 0  # True
            else
              return 1  # False
            fi
          }

          # Format tag info for logging
          format_tag_info() {
            local tags=("$@")
            
            if [ ${#tags[@]} -eq 0 ]; then
              echo "no tags"
              return
            fi
            
            local preserved_count=0
            local digest_count=0
            local other_count=0
            
            for tag in "${tags[@]}"; do
              if is_preserved_tag "$tag"; then
                preserved_count=$((preserved_count + 1))
              elif is_digest_tag "$tag"; then
                digest_count=$((digest_count + 1))
              else
                other_count=$((other_count + 1))
              fi
            done
            
            local info="${#tags[@]} tags:"
            
            if [ $preserved_count -gt 0 ]; then
              info="$info $preserved_count preserved,"
            fi
            
            if [ $digest_count -gt 0 ]; then
              info="$info $digest_count digest,"
            fi
            
            if [ $other_count -gt 0 ]; then
              info="$info $other_count other,"
            fi
            
            # Remove trailing comma
            echo "${info%,}"
          }

          # Delete a package version
          delete_version() {
            local package_name=$1
            local version_id=$2
            
            if [ "$DRY_RUN" = "true" ]; then
              log "[DRY RUN] Would delete $package_name version $version_id"
              return 0
            fi
            
            # Use gh cli to delete the version
            if gh api \
              --method DELETE \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/user/packages/container/$package_name/versions/$version_id"; then
              log "✅ Deleted $package_name version $version_id"
              return 0
            else
              log "❌ Failed to delete $package_name version $version_id"
              return 1
            fi
          }

          # Main function
          main() {
            log "${DRY_RUN:+[DRY RUN] }Starting cleanup in $ORG"
            
            # FIXED: Use /user/packages for current authenticated user
            log "Getting packages for user: $ORG"
            
            # Get all packages - with proper error handling
            packages_response=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/user/packages?package_type=container" || echo "[]")
            
            # Debug output
            debug_response "Packages response:" "$packages_response"
            
            # Make sure we have valid JSON
            if ! echo "$packages_response" | jq empty 2>/dev/null; then
              log "ERROR: Invalid JSON response when fetching packages"
              echo "$packages_response"
              return 1
            fi
            
            # Extract package count
            package_count=$(echo "$packages_response" | jq '. | length')
            log "Found $package_count packages"
            
            # Process each package
            echo "$packages_response" | jq -c '.[]' | while read -r package; do
              if [ -z "$package" ]; then
                continue
              fi
              
              # Extract package name with error handling
              package_name=$(echo "$package" | jq -r '.name // empty')
              if [ -z "$package_name" ]; then
                log "WARNING: Package without name, skipping"
                continue
              fi
              
              log "\nProcessing package: $package_name"
              
              # Get package versions - with proper error handling
              versions_response=$(gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/user/packages/container/$package_name/versions" || echo "[]")
              
              # Debug output
              debug_response "Versions for $package_name:" "$versions_response"
              
              # Make sure we have valid JSON
              if ! echo "$versions_response" | jq empty 2>/dev/null; then
                log "ERROR: Invalid JSON response when fetching versions for $package_name"
                echo "$versions_response"
                continue
              fi
              
              # Extract version count
              version_count=$(echo "$versions_response" | jq '. | length')
              log "  Found $version_count versions"
              
              # Process each version
              echo "$versions_response" | jq -c '.[]' | while read -r version; do
                if [ -z "$version" ]; then
                  continue
                fi
                
                # Extract version details with error handling
                version_id=$(echo "$version" | jq -r '.id // empty')
                if [ -z "$version_id" ]; then
                  log "WARNING: Version without ID, skipping"
                  continue
                fi
                
                created_at=$(echo "$version" | jq -r '.created_at // empty')
                if [ -z "$created_at" ]; then
                  created_at="unknown"
                  created_timestamp=$NOW
                else
                  created_timestamp=$(date -d "$created_at" +%s 2>/dev/null || echo $NOW)
                fi
                
                # Get metadata and tags with error handling
                metadata=$(echo "$version" | jq -r '.metadata // {}')
                container=$(echo "$metadata" | jq -r '.container // {}' 2>/dev/null || echo "{}")
                tags_json=$(echo "$container" | jq -r '.tags // []' 2>/dev/null || echo "[]")
                
                # Debug tags
                debug_response "Tags for version $version_id:" "$tags_json"
                
                # Extract tags as array
                mapfile -t tags < <(echo "$tags_json" | jq -r '.[]' 2>/dev/null || echo "")
                
                # Check age if OLDER_THAN_DAYS is specified
                if [ "$OLDER_THAN_DAYS" -gt 0 ] && [ "$created_timestamp" != "$NOW" ]; then
                  age_seconds=$((NOW - created_timestamp))
                  if [ $age_seconds -lt $OLDER_THAN_SECONDS ]; then
                    log "  Skipping $version_id - too recent ($created_at)"
                    PRESERVED_COUNT=$((PRESERVED_COUNT + 1))
                    continue
                  fi
                fi
                
                tag_info=$(format_tag_info "${tags[@]}")
                
                # Check if we should delete this version
                if should_delete_version "${tags[@]}"; then
                  log "  Deleting version $version_id ($tag_info) from $created_at"
                  if delete_version "$package_name" "$version_id"; then
                    DELETED_COUNT=$((DELETED_COUNT + 1))
                  else
                    FAILED_COUNT=$((FAILED_COUNT + 1))
                  fi
                else
                  log "  Preserving version $version_id ($tag_info) from $created_at"
                  PRESERVED_COUNT=$((PRESERVED_COUNT + 1))
                fi
              done
            done
            
            log "\nCleanup summary:"
            log "  Deleted: $DELETED_COUNT versions"
            log "  Preserved: $PRESERVED_COUNT versions"
            log "  Failed: $FAILED_COUNT deletions"
            log "  ${DRY_RUN:+[DRY RUN] No actual deletions performed}"
            
            # Write to GitHub env
            echo "DELETED_COUNT=$DELETED_COUNT" >> $GITHUB_ENV
            echo "PRESERVED_COUNT=$PRESERVED_COUNT" >> $GITHUB_ENV
            echo "FAILED_COUNT=$FAILED_COUNT" >> $GITHUB_ENV
          }

          # Run the script
          main
          EOF

          chmod +x cleanup.sh

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Run cleanup script
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./cleanup.sh

      - name: Create Summary
        if: always()
        run: |
          echo "# Container Image Cleanup Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Registry: \`${{ github.event.inputs.registry || 'ghcr.io' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Organization: \`${{ github.event.inputs.organization || github.repository_owner }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Dry run: \`${{ github.event.inputs.dryRun || 'true' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Age filter: \`${{ github.event.inputs.olderThan || '7' }} days\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Deleted: ${{ env.DELETED_COUNT || '0' }} images" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Preserved: ${{ env.PRESERVED_COUNT || '0' }} images" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: ${{ env.FAILED_COUNT || '0' }} deletions" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "See job logs for detailed results" >> $GITHUB_STEP_SUMMARY
